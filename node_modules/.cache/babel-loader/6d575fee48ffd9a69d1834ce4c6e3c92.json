{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <div id=\\\"container\\\" @click=\\\"\", \"\\\">\\n      <div id=\\\"textPanel\\\" class=\\\"inline\\\">\\n        <span>\", \"</span>\\n      </div>\\n      <div id=\\\"dropPanel\\\" class=\\\"inline\\\"></div>\\n      <div class=\\\"overlay\\\">\\n        <svg id=\\\"svg\\\"></svg>\\n      </div>\\n    </div>\\n    <wired-card id=\\\"card\\\" tabindex=\\\"-1\\\" role=\\\"listbox\\\" @mousedown=\\\"\", \"\\\" @touchstart=\\\"\", \"\\\"\\n      style=\\\"display: none;\\\">\\n      <slot id=\\\"slot\\\"></slot>\\n    </wired-card>\\n    \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: inline-block;\\n      font-family: inherit;\\n      position: relative;\\n      outline: none;\\n      opacity: 0;\\n    }\\n  \\n    :host(.wired-disabled) {\\n      opacity: 0.5 !important;\\n      cursor: default;\\n      pointer-events: none;\\n      background: rgba(0, 0, 0, 0.02);\\n    }\\n    \\n    :host(.wired-rendered) {\\n      opacity: 1;\\n    }\\n\\n    :host(:focus) path {\\n      stroke-width: 1.5;\\n    }\\n  \\n    #container {\\n      white-space: nowrap;\\n      position: relative;\\n    }\\n  \\n    .inline {\\n      display: inline-block;\\n      vertical-align: top\\n    }\\n  \\n    #textPanel {\\n      min-width: 90px;\\n      min-height: 18px;\\n      padding: 8px;\\n    }\\n  \\n    #dropPanel {\\n      width: 34px;\\n      cursor: pointer;\\n    }\\n  \\n    .overlay {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      pointer-events: none;\\n    }\\n  \\n    svg {\\n      display: block;\\n    }\\n  \\n    path {\\n      stroke: currentColor;\\n      stroke-width: 0.7;\\n      fill: transparent;\\n    }\\n  \\n    #card {\\n      position: absolute;\\n      background: var(--wired-combo-popup-bg, white);\\n      z-index: 1;\\n      box-shadow: 1px 5px 15px -6px rgba(0, 0, 0, 0.8);\\n    }\\n\\n    ::slotted(wired-item) {\\n      display: block;\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css } from 'wired-lib/lib/wired-base';\nimport { rectangle, polygon } from 'wired-lib';\nimport 'wired-card';\nimport 'wired-item';\nlet WiredCombo = class WiredCombo extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.disabled = false;\n    this.cardShowing = false;\n    this.itemNodes = [];\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2(), this.onCombo, this.value && this.value.text, this.onItemClick, this.onItemClick);\n  }\n\n  refreshDisabledState() {\n    if (this.disabled) {\n      this.classList.add('wired-disabled');\n    } else {\n      this.classList.remove('wired-disabled');\n    }\n\n    this.tabIndex = this.disabled ? -1 : +(this.getAttribute('tabindex') || 0);\n  }\n\n  firstUpdated() {\n    this.setAttribute('role', 'combobox');\n    this.setAttribute('aria-haspopup', 'listbox');\n    this.refreshSelection();\n    this.addEventListener('blur', () => {\n      if (this.cardShowing) {\n        this.setCardShowing(false);\n      }\n    });\n    this.addEventListener('keydown', event => {\n      switch (event.keyCode) {\n        case 37:\n        case 38:\n          event.preventDefault();\n          this.selectPrevious();\n          break;\n\n        case 39:\n        case 40:\n          event.preventDefault();\n          this.selectNext();\n          break;\n\n        case 27:\n          event.preventDefault();\n\n          if (this.cardShowing) {\n            this.setCardShowing(false);\n          }\n\n          break;\n\n        case 13:\n          event.preventDefault();\n          this.setCardShowing(!this.cardShowing);\n          break;\n\n        case 32:\n          event.preventDefault();\n\n          if (!this.cardShowing) {\n            this.setCardShowing(true);\n          }\n\n          break;\n      }\n    });\n  }\n\n  updated(changed) {\n    if (changed.has('disabled')) {\n      this.refreshDisabledState();\n    }\n\n    const svg = this.shadowRoot.getElementById('svg');\n\n    while (svg.hasChildNodes()) {\n      svg.removeChild(svg.lastChild);\n    }\n\n    const s = this.shadowRoot.getElementById('container').getBoundingClientRect();\n    svg.setAttribute('width', \"\".concat(s.width));\n    svg.setAttribute('height', \"\".concat(s.height));\n    const textBounds = this.shadowRoot.getElementById('textPanel').getBoundingClientRect();\n    this.shadowRoot.getElementById('dropPanel').style.minHeight = textBounds.height + 'px';\n    rectangle(svg, 0, 0, textBounds.width, textBounds.height);\n    const dropx = textBounds.width - 4;\n    rectangle(svg, dropx, 0, 34, textBounds.height);\n    const dropOffset = Math.max(0, Math.abs((textBounds.height - 24) / 2));\n    const poly = polygon(svg, [[dropx + 8, 5 + dropOffset], [dropx + 26, 5 + dropOffset], [dropx + 17, dropOffset + Math.min(textBounds.height, 18)]]);\n    poly.style.fill = 'currentColor';\n    poly.style.pointerEvents = this.disabled ? 'none' : 'auto';\n    poly.style.cursor = 'pointer';\n    this.classList.add('wired-rendered'); // aria\n\n    this.setAttribute('aria-expanded', \"\".concat(this.cardShowing));\n\n    if (!this.itemNodes.length) {\n      this.itemNodes = [];\n      const nodes = this.shadowRoot.getElementById('slot').assignedNodes();\n\n      if (nodes && nodes.length) {\n        for (let i = 0; i < nodes.length; i++) {\n          const element = nodes[i];\n\n          if (element.tagName === 'WIRED-ITEM') {\n            element.setAttribute('role', 'option');\n            this.itemNodes.push(element);\n          }\n        }\n      }\n    }\n  }\n\n  refreshSelection() {\n    if (this.lastSelectedItem) {\n      this.lastSelectedItem.selected = false;\n      this.lastSelectedItem.removeAttribute('aria-selected');\n    }\n\n    const slot = this.shadowRoot.getElementById('slot');\n    const nodes = slot.assignedNodes();\n\n    if (nodes) {\n      let selectedItem = null;\n\n      for (let i = 0; i < nodes.length; i++) {\n        const element = nodes[i];\n\n        if (element.tagName === 'WIRED-ITEM') {\n          const value = element.value || '';\n\n          if (this.selected && value === this.selected) {\n            selectedItem = element;\n            break;\n          }\n        }\n      }\n\n      this.lastSelectedItem = selectedItem || undefined;\n\n      if (this.lastSelectedItem) {\n        this.lastSelectedItem.selected = true;\n        this.lastSelectedItem.setAttribute('aria-selected', 'true');\n      }\n\n      if (selectedItem) {\n        this.value = {\n          value: selectedItem.value || '',\n          text: selectedItem.textContent || ''\n        };\n      } else {\n        this.value = undefined;\n      }\n    }\n  }\n\n  setCardShowing(showing) {\n    this.cardShowing = showing;\n    const card = this.shadowRoot.getElementById('card');\n    card.style.display = showing ? '' : 'none';\n\n    if (showing) {\n      setTimeout(() => {\n        card.requestUpdate();\n        const nodes = this.shadowRoot.getElementById('slot').assignedNodes().filter(d => {\n          return d.nodeType === Node.ELEMENT_NODE;\n        });\n        nodes.forEach(n => {\n          const e = n;\n\n          if (e.requestUpdate) {\n            e.requestUpdate();\n          }\n        });\n      }, 10);\n    }\n\n    this.setAttribute('aria-expanded', \"\".concat(this.cardShowing));\n  }\n\n  onItemClick(event) {\n    event.stopPropagation();\n    this.selected = event.target.value;\n    this.refreshSelection();\n    this.fireSelected();\n    setTimeout(() => {\n      this.setCardShowing(false);\n    });\n  }\n\n  fireSelected() {\n    this.fireEvent('selected', {\n      selected: this.selected\n    });\n  }\n\n  selectPrevious() {\n    const list = this.itemNodes;\n\n    if (list.length) {\n      let index = -1;\n\n      for (let i = 0; i < list.length; i++) {\n        if (list[i] === this.lastSelectedItem) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        index = 0;\n      } else if (index === 0) {\n        index = list.length - 1;\n      } else {\n        index--;\n      }\n\n      this.selected = list[index].value || '';\n      this.refreshSelection();\n      this.fireSelected();\n    }\n  }\n\n  selectNext() {\n    const list = this.itemNodes;\n\n    if (list.length) {\n      let index = -1;\n\n      for (let i = 0; i < list.length; i++) {\n        if (list[i] === this.lastSelectedItem) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index < 0) {\n        index = 0;\n      } else if (index >= list.length - 1) {\n        index = 0;\n      } else {\n        index++;\n      }\n\n      this.selected = list[index].value || '';\n      this.refreshSelection();\n      this.fireSelected();\n    }\n  }\n\n  onCombo(event) {\n    event.stopPropagation();\n    this.setCardShowing(!this.cardShowing);\n  }\n\n};\n\n__decorate([property({\n  type: Object\n}), __metadata(\"design:type\", Object)], WiredCombo.prototype, \"value\", void 0);\n\n__decorate([property({\n  type: String\n}), __metadata(\"design:type\", String)], WiredCombo.prototype, \"selected\", void 0);\n\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], WiredCombo.prototype, \"disabled\", void 0);\n\nWiredCombo = __decorate([customElement('wired-combo')], WiredCombo);\nexport { WiredCombo };","map":null,"metadata":{},"sourceType":"module"}