{"ast":null,"code":"export const observer = observer => (proto, propName) => {\n  // if we haven't wrapped `updated` in this class, do so\n  if (!proto.constructor._observers) {\n    proto.constructor._observers = new Map();\n    const userUpdated = proto.updated;\n\n    proto.updated = function (changedProperties) {\n      userUpdated.call(this, changedProperties);\n      changedProperties.forEach((v, k) => {\n        const observer = this.constructor._observers.get(k);\n\n        if (observer !== undefined) {\n          observer.call(this, this[k], v);\n        }\n      });\n    }; // clone any existing observers (superclasses)\n\n  } else if (!proto.constructor.hasOwnProperty('_observers')) {\n    const observers = proto.constructor._observers;\n    proto.constructor._observers = new Map();\n    observers.forEach((v, k) => proto.constructor._observers.set(k, v));\n  } // set this method\n\n\n  proto.constructor._observers.set(propName, observer);\n};","map":null,"metadata":{},"sourceType":"module"}