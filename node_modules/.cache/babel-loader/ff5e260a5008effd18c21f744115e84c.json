{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <div class=\\\"overlay\\\">\\n      <svg id=\\\"svg\\\"></svg>\\n    </div>\\n    <div class=\\\"overlay labelContainer\\\">\\n      <div class=\\\"progressLabel\\\">\", \"</div>\\n    </div>\\n    \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: inline-block;\\n      position: relative;\\n      width: 400px;\\n      height: 42px;\\n      font-family: sans-serif;\\n      opacity: 0;\\n    }\\n\\n    :host(.wired-rendered) {\\n      opacity: 1;\\n    }\\n  \\n    svg {\\n      display: block;\\n    }\\n  \\n    path {\\n      stroke: currentColor;\\n      stroke-width: 0.7;\\n      fill: transparent;\\n    }\\n  \\n    .overlay {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      pointer-events: none;\\n    }\\n  \\n    .labelContainer {\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n    }\\n  \\n    .progressLabel {\\n      color: var(--wired-progress-label-color, #000);\\n      font-size: var(--wired-progress-font-size, 14px);\\n      background: var(--wired-progress-label-background, rgba(255,255,255,0.9));\\n      padding: 2px 6px;\\n      border-radius: 4px;\\n      letter-spacing: 1.25px;\\n    }\\n  \\n    .progbox path {\\n      stroke: var(--wired-progress-color, rgba(0, 0, 200, 0.8));\\n      stroke-width: 2.75;\\n      fill: none;\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css } from 'wired-lib/lib/wired-base';\nimport { rectangle, hachureFill } from 'wired-lib';\nlet WiredProgress = class WiredProgress extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.value = 0;\n    this.min = 0;\n    this.max = 100;\n    this.percentage = false;\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2(), this.getProgressLabel());\n  }\n\n  getProgressLabel() {\n    if (this.percentage) {\n      if (this.max === this.min) {\n        return '%';\n      } else {\n        const pct = Math.floor((this.value - this.min) / (this.max - this.min) * 100);\n        return pct + '%';\n      }\n    } else {\n      return '' + this.value;\n    }\n  }\n\n  updated() {\n    const svg = this.shadowRoot.getElementById('svg');\n\n    while (svg.hasChildNodes()) {\n      svg.removeChild(svg.lastChild);\n    }\n\n    const s = this.getBoundingClientRect();\n    svg.setAttribute('width', \"\".concat(s.width));\n    svg.setAttribute('height', \"\".concat(s.height));\n\n    if (!this.box) {\n      this.box = rectangle(svg, 0, 0, s.width, s.height);\n    } else {\n      svg.appendChild(this.box);\n    }\n\n    let pct = 0;\n\n    if (this.max > this.min) {\n      pct = (this.value - this.min) / (this.max - this.min);\n      const progWidth = s.width * Math.max(0, Math.min(pct, 100));\n      const progBox = hachureFill([[0, 0], [progWidth, 0], [progWidth, s.height], [0, s.height]]);\n      svg.appendChild(progBox);\n      progBox.classList.add('progbox');\n    }\n\n    this.classList.add('wired-rendered');\n  }\n\n};\n\n__decorate([property({\n  type: Number\n}), __metadata(\"design:type\", Object)], WiredProgress.prototype, \"value\", void 0);\n\n__decorate([property({\n  type: Number\n}), __metadata(\"design:type\", Object)], WiredProgress.prototype, \"min\", void 0);\n\n__decorate([property({\n  type: Number\n}), __metadata(\"design:type\", Object)], WiredProgress.prototype, \"max\", void 0);\n\n__decorate([property({\n  type: Boolean\n}), __metadata(\"design:type\", Object)], WiredProgress.prototype, \"percentage\", void 0);\n\nWiredProgress = __decorate([customElement('wired-progress')], WiredProgress);\nexport { WiredProgress };","map":null,"metadata":{},"sourceType":"module"}