{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <button class=\\\"\", \"\\\">\\n      <div class=\\\"overlay\\\">\\n        <svg></svg>\\n      </div>\\n      <span>\\n        <slot></slot>\\n      </span>\\n    </button>\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: inline-block;\\n      font-size: 14px;\\n      text-align: left;\\n    }\\n    button {\\n      cursor: pointer;\\n      outline: none;\\n      overflow: hidden;\\n      color: inherit;\\n      user-select: none;\\n      position: relative;\\n      font-family: inherit;\\n      text-align: inherit;\\n      font-size: inherit;\\n      letter-spacing: 1.25px;\\n      padding: 1px 10px;\\n      min-height: 36px;\\n      text-transform: inherit;\\n      background: none;\\n      border: none;\\n      transition: background-color 0.3s ease, color 0.3s ease;\\n      width: 100%;\\n      box-sizing: border-box;\\n      white-space: nowrap;\\n    }\\n    button.selected {\\n      color: var(--wired-item-selected-color, #fff);\\n    }\\n    button::before {\\n      content: '';\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      background: currentColor;\\n      opacity: 0;\\n    }\\n    button span {\\n      display: inline-block;\\n      transition: transform 0.2s ease;\\n      position: relative;\\n    }\\n    button:active span {\\n      transform: scale(1.02);\\n    }\\n    .overlay {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      pointer-events: none;\\n      display: none;\\n    }\\n    button.selected .overlay {\\n      display: block;\\n    }\\n    svg {\\n      display: block;\\n    }\\n    path {\\n      stroke: var(--wired-item-selected-bg, #000);\\n      stroke-width: 2.75;\\n      fill: transparent;\\n      transition: transform 0.05s ease;\\n    }\\n    @media (hover: hover) {\\n      button:hover::before {\\n        opacity: 0.05;\\n      }\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css, query } from 'wired-lib/lib/wired-base';\nimport { hachureFill } from 'wired-lib';\nlet WiredItem = class WiredItem extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.value = '';\n    this.name = '';\n    this.selected = false;\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2(), this.selected ? 'selected' : '');\n  }\n\n  firstUpdated() {\n    if (this.selected) {\n      setTimeout(() => this.requestUpdate());\n    }\n  }\n\n  updated() {\n    if (this.svg) {\n      while (this.svg.hasChildNodes()) {\n        this.svg.removeChild(this.svg.lastChild);\n      }\n\n      const s = this.getBoundingClientRect();\n      this.svg.setAttribute('width', \"\".concat(s.width));\n      this.svg.setAttribute('height', \"\".concat(s.height));\n      const g = hachureFill([[0, 0], [s.width, 0], [s.width, s.height], [0, s.height]]);\n      this.svg.appendChild(g);\n    }\n  }\n\n};\n\n__decorate([property(), __metadata(\"design:type\", Object)], WiredItem.prototype, \"value\", void 0);\n\n__decorate([property(), __metadata(\"design:type\", Object)], WiredItem.prototype, \"name\", void 0);\n\n__decorate([property({\n  type: Boolean\n}), __metadata(\"design:type\", Object)], WiredItem.prototype, \"selected\", void 0);\n\n__decorate([query('svg'), __metadata(\"design:type\", SVGSVGElement)], WiredItem.prototype, \"svg\", void 0);\n\nWiredItem = __decorate([customElement('wired-item')], WiredItem);\nexport { WiredItem };","map":null,"metadata":{},"sourceType":"module"}