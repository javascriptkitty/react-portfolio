{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <svg id=\\\"svg\\\"></svg>\\n    \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: inline-block;\\n      position: relative;\\n      opacity: 0;\\n    }\\n\\n    :host(.wired-rendered) {\\n      opacity: 1;\\n    }\\n\\n    #svg {\\n      display: block;\\n      width: 76px;\\n      height: 76px;\\n    }\\n\\n    path {\\n      stroke: currentColor;\\n      stroke-opacity: 0.5;\\n      stroke-width: 1.5;\\n      fill: none;\\n    }\\n    .knob path {\\n      stroke-width: 2.8 !important;\\n      stroke-opacity: 1;\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css, query } from 'wired-lib/lib/wired-base';\nimport { ellipse, hachureEllipseFill } from 'wired-lib';\nlet WiredSpinner = class WiredSpinner extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.spinning = false;\n    this.duration = 1500;\n    this.value = 0;\n    this.timerstart = 0;\n    this.frame = 0;\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2());\n  }\n\n  firstUpdated() {\n    if (this.svg) {\n      ellipse(this.svg, 38, 38, 60, 60);\n      this.knob = hachureEllipseFill(0, 0, 20, 20);\n      this.knob.classList.add('knob');\n      this.svg.appendChild(this.knob);\n    }\n\n    this.updateCursor();\n    this.classList.add('wired-rendered');\n  }\n\n  updated() {\n    if (this.spinning) {\n      this.startSpinner();\n    } else {\n      this.stopSpinner();\n    }\n  }\n\n  startSpinner() {\n    this.stopSpinner();\n    this.value = 0;\n    this.timerstart = 0;\n    this.nextTick();\n  }\n\n  stopSpinner() {\n    if (this.frame) {\n      window.cancelAnimationFrame(this.frame);\n      this.frame = 0;\n    }\n  }\n\n  nextTick() {\n    this.frame = window.requestAnimationFrame(t => this.tick(t));\n  }\n\n  tick(t) {\n    if (this.spinning) {\n      if (!this.timerstart) {\n        this.timerstart = t;\n      }\n\n      this.value = Math.min(1, (t - this.timerstart) / this.duration);\n      this.updateCursor();\n\n      if (this.value >= 1) {\n        this.value = 0;\n        this.timerstart = 0;\n      }\n\n      this.nextTick();\n    } else {\n      this.frame = 0;\n    }\n  }\n\n  updateCursor() {\n    if (this.knob) {\n      const position = [Math.round(38 + 25 * Math.cos(this.value * Math.PI * 2)), Math.round(38 + 25 * Math.sin(this.value * Math.PI * 2))];\n      this.knob.style.transform = \"translate3d(\".concat(position[0], \"px, \").concat(position[1], \"px, 0) rotateZ(\").concat(Math.round(this.value * 360 * 2), \"deg)\");\n    }\n  }\n\n};\n\n__decorate([property({\n  type: Boolean\n}), __metadata(\"design:type\", Object)], WiredSpinner.prototype, \"spinning\", void 0);\n\n__decorate([property({\n  type: Number\n}), __metadata(\"design:type\", Object)], WiredSpinner.prototype, \"duration\", void 0);\n\n__decorate([query('svg'), __metadata(\"design:type\", SVGSVGElement)], WiredSpinner.prototype, \"svg\", void 0);\n\nWiredSpinner = __decorate([customElement('wired-spinner')], WiredSpinner);\nexport { WiredSpinner };","map":null,"metadata":{},"sourceType":"module"}