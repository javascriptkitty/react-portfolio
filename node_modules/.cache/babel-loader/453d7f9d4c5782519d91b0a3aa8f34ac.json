{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <div class=\\\"overlay\\\">\\n      <svg id=\\\"svg\\\"></svg>\\n    </div>\\n    <mwc-icon>\\n      <slot></slot>\\n    </mwc-icon>\\n    \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: -ms-inline-flexbox;\\n      display: -webkit-inline-flex;\\n      display: inline-flex;\\n      -ms-flex-align: center;\\n      -webkit-align-items: center;\\n      align-items: center;\\n      -ms-flex-pack: center;\\n      -webkit-justify-content: center;\\n      justify-content: center;\\n      position: relative;\\n      vertical-align: middle;\\n      padding: 16px;\\n      -webkit-user-select: none;\\n      -moz-user-select: none;\\n      -ms-user-select: none;\\n      user-select: none;\\n      cursor: pointer;\\n      z-index: 0;\\n      line-height: 1;\\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n      -webkit-tap-highlight-color: transparent;\\n      box-sizing: border-box !important;\\n      outline: none;\\n      color: #fff;\\n      opacity: 0;\\n    }\\n\\n    :host(.wired-rendered) {\\n      opacity: 1;\\n    }\\n  \\n    :host(.wired-disabled) {\\n      opacity: 0.45 !important;\\n      cursor: default;\\n      background: rgba(0, 0, 0, 0.07);\\n      border-radius: 50%;\\n      pointer-events: none;\\n    }\\n  \\n    :host(:active) mwc-icon {\\n      opacity: 1;\\n      transform: scale(1.15);\\n    }\\n\\n    :host(:focus) mwc-icon {\\n      opacity: 1;\\n    }\\n  \\n    .overlay {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n      pointer-events: none;\\n    }\\n  \\n    svg {\\n      display: block;\\n    }\\n  \\n    path {\\n      stroke: var(--wired-fab-bg-color, #018786);\\n      stroke-width: 3;\\n      fill: transparent;\\n    }\\n  \\n    mwc-icon {\\n      position: relative;\\n      font-size: var(--wired-icon-size, 24px);\\n      transition: transform 0.2s ease, opacity 0.2s ease;\\n      opacity: 0.85;\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css } from 'wired-lib/lib/wired-base';\nimport { hachureEllipseFill } from 'wired-lib';\nimport '@material/mwc-icon';\nlet WiredFab = class WiredFab extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.disabled = false;\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2());\n  }\n\n  firstUpdated() {\n    this.addEventListener('keydown', event => {\n      if (event.keyCode === 13 || event.keyCode === 32) {\n        event.preventDefault();\n        this.click();\n      }\n    });\n    this.setAttribute('role', 'button');\n    this.setAttribute('aria-label', this.textContent || this.innerText);\n    setTimeout(() => this.requestUpdate());\n  }\n\n  updated(changed) {\n    if (changed.has('disabled')) {\n      this.refreshDisabledState();\n    }\n\n    const svg = this.shadowRoot.getElementById('svg');\n\n    while (svg.hasChildNodes()) {\n      svg.removeChild(svg.lastChild);\n    }\n\n    const s = this.getBoundingClientRect();\n    const min = Math.min(s.width, s.height);\n    svg.setAttribute('width', \"\".concat(min));\n    svg.setAttribute('height', \"\".concat(min));\n    const g = hachureEllipseFill(min / 2, min / 2, min, min);\n    svg.appendChild(g);\n    this.classList.add('wired-rendered');\n  }\n\n  refreshDisabledState() {\n    if (this.disabled) {\n      this.classList.add('wired-disabled');\n    } else {\n      this.classList.remove('wired-disabled');\n    }\n\n    this.tabIndex = this.disabled ? -1 : +(this.getAttribute('tabindex') || 0);\n  }\n\n};\n\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], WiredFab.prototype, \"disabled\", void 0);\n\nWiredFab = __decorate([customElement('wired-fab')], WiredFab);\nexport { WiredFab };","map":null,"metadata":{},"sourceType":"module"}