{"ast":null,"code":"import { Segment } from '../geometry';\nexport class HachureIterator {\n  constructor(top, bottom, left, right, gap, sinAngle, cosAngle, tanAngle) {\n    this.deltaX = 0;\n    this.hGap = 0;\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n    this.gap = gap;\n    this.sinAngle = sinAngle;\n    this.tanAngle = tanAngle;\n\n    if (Math.abs(sinAngle) < 0.0001) {\n      this.pos = left + gap;\n    } else if (Math.abs(sinAngle) > 0.9999) {\n      this.pos = top + gap;\n    } else {\n      this.deltaX = (bottom - top) * Math.abs(tanAngle);\n      this.pos = left - Math.abs(this.deltaX);\n      this.hGap = Math.abs(gap / cosAngle);\n      this.sLeft = new Segment([left, bottom], [left, top]);\n      this.sRight = new Segment([right, bottom], [right, top]);\n    }\n  }\n\n  nextLine() {\n    if (Math.abs(this.sinAngle) < 0.0001) {\n      if (this.pos < this.right) {\n        const line = [this.pos, this.top, this.pos, this.bottom];\n        this.pos += this.gap;\n        return line;\n      }\n    } else if (Math.abs(this.sinAngle) > 0.9999) {\n      if (this.pos < this.bottom) {\n        const line = [this.left, this.pos, this.right, this.pos];\n        this.pos += this.gap;\n        return line;\n      }\n    } else {\n      let xLower = this.pos - this.deltaX / 2;\n      let xUpper = this.pos + this.deltaX / 2;\n      let yLower = this.bottom;\n      let yUpper = this.top;\n\n      if (this.pos < this.right + this.deltaX) {\n        while (xLower < this.left && xUpper < this.left || xLower > this.right && xUpper > this.right) {\n          this.pos += this.hGap;\n          xLower = this.pos - this.deltaX / 2;\n          xUpper = this.pos + this.deltaX / 2;\n\n          if (this.pos > this.right + this.deltaX) {\n            return null;\n          }\n        }\n\n        const s = new Segment([xLower, yLower], [xUpper, yUpper]);\n\n        if (this.sLeft && s.intersects(this.sLeft)) {\n          xLower = s.xi;\n          yLower = s.yi;\n        }\n\n        if (this.sRight && s.intersects(this.sRight)) {\n          xUpper = s.xi;\n          yUpper = s.yi;\n        }\n\n        if (this.tanAngle > 0) {\n          xLower = this.right - (xLower - this.left);\n          xUpper = this.right - (xUpper - this.left);\n        }\n\n        const line = [xLower, yLower, xUpper, yUpper];\n        this.pos += this.hGap;\n        return line;\n      }\n    }\n\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}