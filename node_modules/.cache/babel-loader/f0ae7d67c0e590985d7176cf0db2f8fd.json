{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cristina/Desktop/BERKELEY/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    <div id=\\\"container\\\" @click=\\\"\", \"\\\">\\n      <div id=\\\"checkPanel\\\" class=\\\"inline\\\">\\n        <svg id=\\\"svg\\\" width=\\\"0\\\" height=\\\"0\\\"></svg>\\n      </div>\\n      <div class=\\\"inline\\\">\\n        <slot></slot>\\n      </div>\\n    </div>\\n    \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    :host {\\n      display: block;\\n      font-family: inherit;\\n      outline: none;\\n      opacity: 0;\\n    }\\n  \\n    :host(.wired-disabled) {\\n      opacity: 0.6 !important;\\n      cursor: default;\\n      pointer-events: none;\\n    }\\n  \\n    :host(.wired-disabled) svg {\\n      background: rgba(0, 0, 0, 0.07);\\n    }\\n\\n    :host(.wired-rendered) {\\n      opacity: 1;\\n    }\\n  \\n    :host(:focus) path {\\n      stroke-width: 1.5;\\n    }\\n  \\n    #container {\\n      display: inline-block;\\n      white-space: nowrap;\\n    }\\n  \\n    .inline {\\n      display: inline-block;\\n      vertical-align: middle;\\n      -moz-user-select: none;\\n      user-select: none;\\n    }\\n  \\n    #checkPanel {\\n      cursor: pointer;\\n    }\\n  \\n    svg {\\n      display: block;\\n    }\\n  \\n    path {\\n      stroke: var(--wired-checkbox-icon-color, currentColor);\\n      stroke-width: 0.7;\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WiredBase, customElement, property, html, css } from 'wired-lib/lib/wired-base';\nimport { rectangle, line } from 'wired-lib';\nlet WiredCheckbox = class WiredCheckbox extends WiredBase {\n  constructor() {\n    super(...arguments);\n    this.checked = false;\n    this.disabled = false;\n  }\n\n  static get styles() {\n    return css(_templateObject());\n  }\n\n  render() {\n    return html(_templateObject2(), this.toggleCheck);\n  }\n\n  refreshDisabledState() {\n    if (this.disabled) {\n      this.classList.add('wired-disabled');\n    } else {\n      this.classList.remove('wired-disabled');\n    }\n\n    this.tabIndex = this.disabled ? -1 : +(this.getAttribute('tabindex') || 0);\n  }\n\n  toggleCheck() {\n    this.checked = !(this.checked || false);\n    this.fireEvent('change', {\n      checked: this.checked\n    });\n  }\n\n  firstUpdated() {\n    this.setAttribute('role', 'checkbox');\n    this.addEventListener('keydown', event => {\n      if (event.keyCode === 13 || event.keyCode === 32) {\n        event.preventDefault();\n        this.toggleCheck();\n      }\n    });\n  }\n\n  updated(changed) {\n    if (changed.has('disabled')) {\n      this.refreshDisabledState();\n    }\n\n    const svg = this.shadowRoot.getElementById('svg');\n\n    while (svg.hasChildNodes()) {\n      svg.removeChild(svg.lastChild);\n    }\n\n    const s = {\n      width: 24,\n      height: 24\n    };\n    svg.setAttribute('width', \"\".concat(s.width));\n    svg.setAttribute('height', \"\".concat(s.height));\n    rectangle(svg, 0, 0, s.width, s.height);\n    const checkpaths = [];\n    checkpaths.push(line(svg, s.width * 0.3, s.height * 0.4, s.width * 0.5, s.height * 0.7));\n    checkpaths.push(line(svg, s.width * 0.5, s.height * 0.7, s.width + 5, -5));\n    checkpaths.forEach(d => {\n      d.style.strokeWidth = \"\".concat(2.5);\n    });\n\n    if (this.checked) {\n      checkpaths.forEach(d => {\n        d.style.display = '';\n      });\n    } else {\n      checkpaths.forEach(d => {\n        d.style.display = 'none';\n      });\n    }\n\n    this.classList.add('wired-rendered');\n  }\n\n};\n\n__decorate([property({\n  type: Boolean\n}), __metadata(\"design:type\", Object)], WiredCheckbox.prototype, \"checked\", void 0);\n\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), __metadata(\"design:type\", Object)], WiredCheckbox.prototype, \"disabled\", void 0);\n\nWiredCheckbox = __decorate([customElement('wired-checkbox')], WiredCheckbox);\nexport { WiredCheckbox };","map":null,"metadata":{},"sourceType":"module"}